open! Common
open V1
module Currency_map = Map.Make (Currency.Enum_or_string)
module Symbol_map = Map.Make (Symbol.Enum_or_string)


module Update_source = struct
  module T = struct
    type t =
      [ `Market_data
      | `Trade
      | `External_trade
      ]
    [@@deriving sexp, equal, compare, enumerate]
  end

  include Json.Make (Json.Enum (T))
end

module type ENTRY = sig
  type t =
    { symbol : Symbol.Enum_or_string.t;
      pnl : float;
      position : float;
      spot : float;
      pnl_spot : float;
      notional : float;
      update_time : Timestamp.t;
      update_source : Update_source.t
    }
  [@@deriving sexp, compare, equal, fields, csv]

  val create :
    ?notional:float ->
    ?update_source:Update_source.t ->
    ?update_time:Timestamp.t ->
    symbol:Symbol.Enum_or_string.t ->
    unit ->
    t

  val on_trade :
    ?update_source:Update_source.t ->
    ?timestamp:Timestamp.t ->
    ?avg_trade_price:float ->
    t ->
    price:float ->
    side:Side.t ->
    qty:float ->
    t

  val update_spot : ?timestamp:Timestamp.t -> t -> float -> t

  val update_from_book : t -> Order_book.Book.t -> t

  val combine :
    ?close_on:[ `All_inputs_closed | `Any_input_closed ] ->
    init:t ->
    Order_book.Book.t Pipe.Reader.t ->
    Order_events.response Pipe.Reader.t ->
    t Pipe.Reader.t Deferred.t
  (* [combine ?close_on init book events] produces a pipe of entry updates starting with [init], pushing
      new entries on the pipe for [t.symbol] by either public order [book] updates (which
      affect unrealized pnl) or the private order [events] pipe which affect both realize and unrealized.
  *)

  val from_mytrades :
    ?init:t Symbol_map.t ->
    ?avg_trade_prices:float Symbol_map.t ->
    Mytrades.response ->
    t Symbol_map.t * t Pipe.Reader.t Symbol_map.t
  (* [from_mytades ?init ?avg_trade_prices response]
     produces ledger entries from responses generated by the mytrades api.
     Given an optional [init] of initial entries for each symbol and
     optional [avg_trace_prices] that maps symbols to trade prices to
     estimate external trades using the average cost method.

     If any trade occurs that would end up in a short position of a
     particular symbol, the symbol map is then used to assume a prior
     buy using the price as given in the map. *)

  val from_mytrades_pipe :
    ?symbols: Symbol.t list ->
    ?init:t Symbol_map.t ->
    ?timestamp: Timestamp.t ->
    ?how:Monad_sequence.how ->
    ?close_on:[ `All_inputs_closed | `Any_input_closed ] ->
    ?avg_trade_prices:float Symbol_map.t ->
    ?nonce:Nonce.reader ->
    (module Cfg.S) ->
    Order_events.response Pipe.Reader.t ->
    t Pipe.Reader.t Symbol_map.t Deferred.t
end

module T = struct
  type t =
    { symbol : Symbol.Enum_or_string.t;
      pnl : float;
      position : float;
      spot : float;
      pnl_spot : float;
      notional : float;
      update_time : Timestamp.t;
      update_source : Update_source.t
    }
  [@@deriving sexp, compare, equal, fields, csv]

  let create ?(notional = 0.0) ?(update_source = `Market_data) ?update_time
      ~(symbol : Symbol.Enum_or_string.t) () : t =
    { symbol;
      pnl = 0.;
      spot = Float.nan;
      notional;
      pnl_spot = 0.;
      position = 0.;
      update_source;
      update_time = Option.value_or_thunk update_time ~default:Timestamp.now
    }

  let rec on_trade ?(update_source = `Trade) ?timestamp
      ?(avg_trade_price : float option) t ~(price : float) ~(side : Side.t)
      ~(qty : float) : t =
    Log.Global.info "on_trade: price=%f side=%s qty=%f"  price (Side.to_string side) qty;
    let timestamp = Option.value_or_thunk timestamp ~default:Timestamp.now in
    let position_sign =
      match side with
      | `Buy -> 1.0
      | `Sell -> -1.0
    in
    let position : float = t.position +. (qty *. position_sign) in
    let pnl_spot = price *. position in
    ( match Float.is_negative position with
    | true ->
      let qty = Float.abs position in
      let avg_trade_price = Option.value ~default:price avg_trade_price in
      let t =
        on_trade ~timestamp ~price:avg_trade_price ~side:(Side.opposite side)
          ~update_source:`External_trade ~qty t
      in
      on_trade ~update_source ~timestamp ~avg_trade_price ~price ~side ~qty t
    | false ->
      let notional_sign : float = position_sign *. -1.0 in
      let package_price = qty *. price in
      let signed_notional = notional_sign *. package_price in
      let notional = signed_notional +. t.notional in
      Log.Global.info "package_price=%f t.notional=%f notional_sign=%f notional=%f signed_t_notitional=%f" package_price t.notional notional_sign notional signed_notional;
      { t with
        spot = price;
        notional;
        pnl_spot;
        position;
        pnl = pnl_spot +. notional;
        update_time = timestamp;
        update_source
      } )
    |> fun t ->
    let sexp = sexp_of_t t in
    print_s sexp;
    t

  let update_spot ?timestamp t spot =
    let open Float in
    let update_time = Option.value_or_thunk timestamp ~default:Timestamp.now in
    let pnl_spot = t.position * spot in
    { t with
      spot;
      pnl_spot;
      pnl = t.notional + pnl_spot;
      update_time;
      update_source = `Market_data
    }

  let update_from_book t book =
    update_spot t
      (Order_book.Book.market_price book ~side:`Bid ~volume:t.position
       |> function
       | Order_book.Price_level.{ price; volume } -> (
         match Float.equal volume t.position with
         | true -> price
         | false ->
           Log.Global.info
             "Volume estimate %f for price %f less than position %f" volume
             t.position price;
           price ) )

  type event =
    [ `Order_event of Order_events.Order_event.t
    | `Order_book of Order_book.Book.t
    ]
  [@@deriving sexp]

  let combine ~init ?num_values ?behavior (order_book : Order_book.Book.t Pipe.Reader.t)
      (order_events_pipe : Order_events.response Pipe.Reader.t) =
    let order_book =
      Pipe.map order_book ~f:(fun t -> (`Order_book t :> event))
    in
    let order_events_pipe =
      Pipe.concat_map_list order_events_pipe ~f:(function
        | `Order_event e -> [ e ]
        | `Order_events ee -> ee
        | _ -> [] )
      |> Pipe.filter_map ~f:(fun (o : Order_events.Order_event.t) ->
             match Symbol.Enum_or_string.equal o.symbol init.symbol with
             | true -> Some (`Order_event o :> event)
             | false -> None )
    in
    return @@ Pipe_ext.combine ?num_values ?behavior order_book order_events_pipe
    >>| fun pipe ->
    Pipe.folding_map pipe ~init ~f:(fun t e ->
        match e with
        | `Order_book book ->
          let t = update_from_book t book in
          (t, t)
        | `Order_event event -> (
          match event with
          | { symbol = _;
              side;
              timestamp = _;
              timestampms;
              executed_amount;
              price;
              _
            } ->
            let t =
              match Option.both executed_amount price with
              | None -> t
              | Some (executed_amount, price) ->
                let price = Float.of_string price in
                let qty = Float.of_string executed_amount in
                let timestamp = timestampms in
                on_trade t ~timestamp ~side ~price ~qty
            in
            (t, t) ) )

  let from_mytrades ?(init : t Symbol_map.t option)
      ?(avg_trade_prices : float Symbol_map.t option)
      (response : Mytrades.trade list) :
      t Symbol_map.t * t Pipe.Reader.t Symbol_map.t =
    let init : _ Symbol_map.t = Option.value init ~default:Symbol_map.empty in
    let fold_f
        (symbol_map : (t * t Pipe.Reader.t * t Pipe.Writer.t) Symbol_map.t)
        (trade : Mytrades.trade) =
      let symbol : Symbol.Enum_or_string.t = trade.symbol in
      let update (t, reader, writer) =
        let price = Float.of_string trade.price in
        let side = trade.type_ in
        let qty = Float.of_string trade.amount in
        let avg_trade_price =
          Option.value ~default:Symbol_map.empty avg_trade_prices
          |> fun avg_trade_prices -> Map.find avg_trade_prices symbol
        in
        let timestamp = trade.timestamp in
        let t' = on_trade ?avg_trade_price t ~timestamp ~price ~side ~qty in
        ( t',
          reader,
          ( Pipe.write_without_pushback writer t';
            writer ) )
      in
      let f = function
        | None ->
          let entry = create ~symbol () in
          let reader, writer = Pipe.create () in
          update (entry, reader, writer)
        | Some (t, reader, writer) -> update (t, reader, writer)
      in
      Core.Map.update symbol_map symbol ~f
    in
    let init =
      Map.map init ~f:(fun t ->
          let reader, writer = Pipe.create () in
          (t, reader, writer) )
    in
    let result =
      List.sort response ~compare:(fun x y ->
          Timestamp.compare x.timestampms y.timestampms )
      |> List.fold ~init ~f:fold_f
    in
    ( Map.map result ~f:(fun (last_t, _reader, _writer) -> last_t),
      Map.map result ~f:(fun (_last_t, reader, _writer) -> reader) )

  let from_mytrades_pipe ?symbols ?timestamp ?(how = `Sequential) ?init ?avg_trade_prices ?nonce
      (module Cfg : Cfg.S) order_events =
            (match nonce with
            | Some nonce -> return nonce
            | None -> Nonce.File.default ()) >>= fun nonce ->
    let symbols = Option.value symbols ~default:(Symbol.all |> List.map ~f:Symbol.Enum_or_string.of_enum) in
    let order_events =
      List.folding_map ~init:order_events symbols ~f:(fun oe symbol ->
          let oe, oe' = Pipe.fork ~pushback_uses:`Fast_consumer_only oe in
          (oe', (symbol, oe)) )
      |> Symbol_map.of_alist_exn
    in
    Deferred.Map.mapi ~how order_events ~f:(fun ~key:enum_or_str_symbol ~data:order_events ->
        let symbol = Symbol.Enum_or_string.to_enum_exn enum_or_str_symbol in
        Order_book.Book.pipe_exn (module Cfg) ~symbol () >>= fun order_book ->
         Mytrades.post (module Cfg) nonce Mytrades.{symbol;timestamp;limit_trades=None} >>= fun trades ->
         let init, trades_by_symbol = from_mytrades ?init ?avg_trade_prices (Poly_ok.ok_exn trades) in
         let init = Map.find init enum_or_str_symbol |> Option.value ~default:(create ~symbol:enum_or_str_symbol ()) in
         let trade_pipe = Map.find trades_by_symbol enum_or_str_symbol |> Option.value_or_thunk ~default:Pipe.empty in
         combine ~init order_book order_events >>| Pipe_ext.combine trade_pipe)
  
end

module Entry (*: ENTRY *) = struct
  module Csv_writer = Csv_support.Writer (T)
  include T
end

module type S = sig
  type t = (Entry.t Symbol_map.t[@deriving sexp, equal, compare])

  val from_mytrades :
    ?avg_trade_prices:float Symbol_map.t ->
    Mytrades.response ->
    t * Entry.t Pipe.Reader.t

  val update_spots : ?timestamp:Timestamp.t -> t -> float Symbol_map.t -> t

  val command : string * Command.t
end

module Ledger (*: S *) = struct
  type t = Entry.t Symbol_map.t [@@deriving sexp, compare, equal]

  (*
  type event =
    { ledger : t;
      symbol : Symbol.Enum_or_string.t;
      entry : Entry.t
    }
  [@@deriving sexp, compare, equal]
*)
  let update_from_books (pnl : t) ~(books : Order_book.Books.t) : t =
    let f ~key:symbol ~data:t =
      Option.bind (Symbol.Enum_or_string.to_enum symbol) ~f:(fun symbol ->
          Order_book.Books.book books symbol
          |> Option.map ~f:(Entry.update_from_book t) )
    in
    Map.filter_mapi pnl ~f

  let update_from_book' ~(book : Order_book.Book.t) =
    update_from_books ~books:(Order_book.Books.(set_book empty) book)

  let on_trade' ?update_source ?timestamp ?(avg_trade_price : float option)
      (t : t) ~symbol ~(price : float) ~(side : Side.t) ~(qty : float) : t =
    Map.update t symbol ~f:(fun t ->
        let t = Option.value_or_thunk t ~default:(Entry.create ~symbol) in
        Entry.on_trade ?update_source ?timestamp ?avg_trade_price ~qty ~price
          ~side t )

  let on_order_events (t : t) (events : Order_events.Order_event.t list) =
    let events =
      List.filter events ~f:(fun event ->
          Order_events.Order_event_type.equal event.type_ `Fill )
    in
    List.fold events ~init:t ~f:(fun t event ->
        let price =
          Option.value_exn event.avg_execution_price |> Float.of_string
        in
        let qty = Option.value_exn event.executed_amount |> Float.of_string in
        let symbol = event.symbol in
        let side = event.side in
        on_trade' t ~symbol ~timestamp:event.timestampms ~side ~price ~qty )

  let on_order_event_response t response =
    on_order_events t (Order_events.order_events_of_response response)

  let update_spots ?timestamp (pnl : t) (prices : float Symbol_map.t) =
    Map.fold prices ~init:pnl ~f:(fun ~key:symbol ~data:price pnl ->
        Map.update pnl symbol ~f:(function
          | None -> Entry.create ~symbol ()
          | Some t -> Entry.update_spot ?timestamp t price ) )

  let ok_exn' x = Poly_ok.ok_exn x
  let with_csv_writer ?(how=`Parallel) ?dir ?timestamp ?avg_trade_prices config symbols =
    Nonce.File.default () >>= fun nonce ->
    Order_events.client config ~nonce () >>= fun order_events -> (Pipe.map order_events ~f:ok_exn' |> return) >>= fun order_events ->
    T.from_mytrades_pipe ~how ?timestamp ?avg_trade_prices ~symbols ~nonce config order_events >>=
    fun symbol_to_reader ->
      let result = Deferred.Map.mapi ~how symbol_to_reader ~f:
        (fun ~key:symbol ~data:reader ->
          let name = sprintf "pnl.%s" (Symbol.Enum_or_string.to_string symbol) in
          let csv_read entry = 
            let csv = Entry.Csv_writer.(add empty entry) in
            let num_written = Entry.Csv_writer.write ?dir ~name csv in
            Log.Global.info "wrote %d record(s) to %s" num_written name;
            entry in
          Pipe.map reader ~f:csv_read |> return
        ) in result


  let timestamp_param =
    Command.Param.(
      flag "-ts"
        (optional (Command.Arg_type.create Time_float_unix.of_string))
        ~doc:
          "TIMESTAMP Return trades before or equal to the given unix timestamp." )

  let limit_trades_param =
    Command.Param.(
      flag "-lt" (optional int) ~doc:"INT Limit the number of trades." )

  let symbol_param =
    let symbol_of_string (s : string) =
      match Symbol.of_string_opt s with
      | Some symbol -> symbol
      | None -> (
        match Currency.of_string_opt s with
        | Some currency ->
          Symbol.of_currency_pair currency `Usd
          |> Option.value_exn ~here:[%here]
               ~message:(sprintf "Invalid currency %s" s)
        | None -> failwithf "Invalid symbol %s" s () )
    in

    
    Command.Param.(
      flag "--symbol"
        (optional (Command.Arg_type.create symbol_of_string))
        ~doc:"STRING Symbol to compute PNL over. Defaults to all." )
(**
Command does what?

- Computes pnl for given set of symbols (or all)
- Does so by getting latest spot prices (from order book)
- Connects to order event pipe, trade pipe, trade list
- Produces time order pnl entries up to present moment (or let it run and produce a stream)
- TODO: capture trades > 500 with multiple requests
- Allow synthetic trades or estimates of avg if needed by calculation.
  (for wallet xfers with unknown purchase prices)

*)
  let command : string * Command.t =
    let operation_name = "ledger" in
    let open Command.Let_syntax in
    ( operation_name,
      Command.async
        ~summary:(Path.to_summary ~has_subnames:false [ operation_name ])
        [%map_open
          let _timestamp = timestamp_param
          and config = Cfg.param
          and _limit_trades = limit_trades_param
          and symbol = symbol_param in
          fun () ->
            let symbols = Option.value_map ~default:Symbol.all symbol ~f:List.singleton in
            let symbols = List.map ~f:Symbol.Enum_or_string.of_enum symbols in
            let config = Cfg.or_default config in
          with_csv_writer config symbols >>= fun symbol_reader -> 
            Deferred.Map.iter ~how:`Sequential symbol_reader ~f:(fun reader -> 
              let f = function 
              | T.{update_source=`Market_data;_} -> true 
              | _ -> false
              in
              Pipe.filter reader ~f |>
              Pipe.read_exactly ?consumer:None ~num_values:1 >>= fun _ -> Deferred.unit)])
end

include Ledger

module Test = struct
  let process_trades t trades =
    List.fold_left ~init:t
      ~f:(fun t (price, side, qty) -> T.on_trade t ~price ~side ~qty)
      trades

  let test1 () =
    let trades = [ (1.0, `Buy, 10.0) ] in
    let t = T.create ~symbol:(Symbol.Enum_or_string.Enum `Ernusd) () in
    let t' = process_trades t trades in
    Log.Global.info_s (T.sexp_of_t t')
end
